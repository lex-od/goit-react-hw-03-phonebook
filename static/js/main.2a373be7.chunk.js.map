{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactItem/ContactItem.module.scss","styles/App.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onSubmit","this","className","css","label","type","pattern","config","INPUT_NAME_PATTERN","title","INPUT_NAME_TITLE","onChange","required","INPUT_TEL_PATTERN","INPUT_TEL_TITLE","addContact","Component","ContactItem","id","onDelete","deleteContact","onClick","ContactList","contacts","map","contactItem","Filter","App","filter","isContactExists","alert","newContact","uuid","delId","changeFilter","savedContacts","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","normName","toLowerCase","find","normFilter","includes","filteredContacts","getFilteredContacts","telBookTitle","contactsTitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a373be7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__1nIFq\",\"addContact\":\"ContactForm_addContact__3_4JV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ContactItem_name__28ARg\",\"number\":\"ContactItem_number__2k-t_\",\"deleteContact\":\"ContactItem_deleteContact__3l1z2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"telBookTitle\":\"App_telBookTitle__38PMo\",\"contactsTitle\":\"App_contactsTitle__NqvtW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactList_contactItem__1D65o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1JZlC\"};","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from './ContactForm.module.scss';\r\nimport config from '../../json/ContactFormConfig.json';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    state = { name: '', number: '' };\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        this.props.onSubmit(this.state);\r\n\r\n        this.setState({ name: '', number: '' });\r\n    };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label className={css.label}>\r\n                    Имя\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern={config.INPUT_NAME_PATTERN}\r\n                        title={config.INPUT_NAME_TITLE}\r\n                        value={name}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <label className={css.label}>\r\n                    Телефон\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern={config.INPUT_TEL_PATTERN}\r\n                        title={config.INPUT_TEL_TITLE}\r\n                        value={number}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                    />\r\n                </label>\r\n                <button className={css.addContact}>Добавить контакт</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport css from './ContactItem.module.scss';\r\n\r\nconst ContactItem = ({ id, name, number, onDelete }) => (\r\n    <>\r\n        <span className={css.name}>{name}: </span>\r\n        <span className={css.number}>{number}</span>\r\n        <button\r\n            className={css.deleteContact}\r\n            type=\"button\"\r\n            onClick={() => {\r\n                onDelete(id);\r\n            }}\r\n        >\r\n            Удалить\r\n        </button>\r\n    </>\r\n);\r\n\r\nContactItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport css from './ContactList.module.scss';\r\nimport ContactItem from '../ContactItem';\r\n\r\nconst ContactList = ({ contacts, onDelete }) => (\r\n    <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li className={css.contactItem} key={id}>\r\n                <ContactItem\r\n                    id={id}\r\n                    name={name}\r\n                    number={number}\r\n                    onDelete={onDelete}\r\n                />\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n        }),\r\n    ).isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport css from './Filter.module.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label>\r\n        Найти контакты по имени\r\n        <input\r\n            className={css.label}\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport css from './styles/App.module.scss';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        contacts: [],\r\n        filter: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Получаем контакты из localStorage\r\n        const savedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n        if (savedContacts) {\r\n            this.setState({ contacts: savedContacts });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Сохраняем контакты в localStorage\r\n        if (prevState.contacts !== this.state.contacts) {\r\n            localStorage.setItem(\r\n                'contacts',\r\n                JSON.stringify(this.state.contacts),\r\n            );\r\n        }\r\n    }\r\n\r\n    addContact = ({ name, number }) => {\r\n        if (this.isContactExists(name)) {\r\n            alert(`Контакт \"${name}\" уже существует`);\r\n            return;\r\n        }\r\n\r\n        const newContact = { id: uuid(), name, number };\r\n\r\n        this.setState(({ contacts }) => ({\r\n            contacts: [newContact, ...contacts],\r\n        }));\r\n    };\r\n\r\n    deleteContact = delId => {\r\n        this.setState(({ contacts }) => ({\r\n            contacts: contacts.filter(({ id }) => id !== delId),\r\n        }));\r\n    };\r\n\r\n    changeFilter = e => {\r\n        this.setState({ filter: e.target.value });\r\n    };\r\n\r\n    isContactExists(name) {\r\n        const normName = name.toLowerCase();\r\n\r\n        return !!this.state.contacts.find(\r\n            ({ name }) => name.toLowerCase() === normName,\r\n        );\r\n    }\r\n\r\n    getFilteredContacts() {\r\n        const normFilter = this.state.filter.toLowerCase();\r\n\r\n        return this.state.contacts.filter(({ name }) =>\r\n            name.toLowerCase().includes(normFilter),\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { filter } = this.state;\r\n        const filteredContacts = this.getFilteredContacts();\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className={css.telBookTitle}>Телефонная книга</h1>\r\n                <ContactForm onSubmit={this.addContact} />\r\n\r\n                <h2 className={css.contactsTitle}>Контакты</h2>\r\n                <Filter value={filter} onChange={this.changeFilter} />\r\n                <ContactList\r\n                    contacts={filteredContacts}\r\n                    onDelete={this.deleteContact}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './styles/global.scss';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}